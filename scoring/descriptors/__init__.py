import numpy as np
from scipy.spatial.distance import cdist as distance

class Molecule:
    """ Class which holds dictionaries aiding descriptors calculation """
    def __init__(self, mol):
        """ mol: pybel molecule """
        self.m = mol
    
    def coordinate_dict(self, atomic_nums):
        """
        Returns vector of atomic coordinates of atoms with atomic number = atomic_num in given molecule 
        
        atomic nums: array of atomic numbers to compute the dictionary 
        """
        mol_atoms = {}
        for a in atomic_nums:
            mol_atoms[a] = []
        for atom in self.m:
            if atom.atomicnum in atomic_nums:
                   mol_atoms[atom.atomicnum].append(atom.coords)
        for a in atomic_nums:
            if len(mol_atoms[a]) > 0:
                mol_atoms[a] = np.array(mol_atoms[a])
            else:
                mol_atoms[a] = np.array([])
        return mol_atoms


# DESCRIPTORS

def close_contact(mol1_atoms, mol2_atoms, cutoff):
    """
    Builds descriptor from two dictionaries (protein and ligand) generated by mol_dict()
    """
    desc = []
    for mol2_a in sorted(mol2_atoms.keys()):
        for mol1_a in sorted(mol1_atoms.keys()):
            if len(mol1_atoms[mol1_a])> 0 and len(mol2_atoms[mol2_a]) > 0:
                desc.append(np.sum(distance(mol1_atoms[mol1_a], mol2_atoms[mol2_a]) < cutoff))
            else:
                desc.append(0)
    
    return np.array(desc)
